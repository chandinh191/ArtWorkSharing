// <auto-generated />
using System;
using AWS_BusinessObjects.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AWS_BusinessObjects.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240321134514_init2")]
    partial class init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AdminAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("AdminAccount");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArtWorkStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArtWorks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7300),
                            Description = "Description 1",
                            ImageUrl = "https://img.cdn-pictorem.com/uploads/collection/D/DN4DFF8JRC/900_Nature-Art_10.jpg",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 1",
                            Price = 100f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7307),
                            Description = "Description 2",
                            ImageUrl = "https://i.ebayimg.com/images/g/pAUAAOSw5yJjhMYl/s-l1200.webp",
                            IsDeleted = false,
                            IsPreOrder = true,
                            IsSold = false,
                            Name = "ArtWork 2",
                            Price = 200f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7311),
                            Description = "Description 3",
                            ImageUrl = "https://media.takealot.com/covers_images/0e56acf396604d34ac7c414b287c7cd7/s-pdpxl.file",
                            IsDeleted = false,
                            IsPreOrder = true,
                            IsSold = false,
                            Name = "ArtWork 3",
                            Price = 300f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        },
                        new
                        {
                            Id = new Guid("7b76bf1f-d24c-4ac9-b466-4179e65605b2"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7315),
                            Description = "Description 4",
                            ImageUrl = "https://studio.pinotspalette.com/naperville/images/nap-uniquevangogh.jpg",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 4",
                            Price = 400f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        },
                        new
                        {
                            Id = new Guid("a25e170e-7ddc-4bdc-9215-51c6fb9bcd96"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7319),
                            Description = "Description 5",
                            ImageUrl = "https://www.singulart.com/images/artworks/v2/cropped/2479/main/carousel/1844446_b5d87c0efe493d715a1d57f480131a2f.jpeg",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 5",
                            Price = 500f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("b18dcaa1-d99a-4f15-a30c-5fd72c30280e"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7324),
                            Description = "Description 6",
                            ImageUrl = "https://images.saatchiart.com/saatchi/1093024/art/4707641/3777473-FIDYEXAV-7.jpg",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 6",
                            Price = 600f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("bd37c967-1817-495b-89eb-665c81b02d5e"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7329),
                            Description = "Description 7",
                            ImageUrl = "https://images.saatchiart.com/saatchi/770124/art/8867466/7930834-HSC00923-7.jpg",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 7",
                            Price = 700f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("1f35558f-a942-4837-81a4-720bae0e8bb1"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7333),
                            Description = "Description 8",
                            ImageUrl = "https://scontent.fsgn5-3.fna.fbcdn.net/v/t1.6435-9/191815536_1305384429858113_8269960277638413432_n.jpg?_nc_cat=104&ccb=1-7&_nc_sid=5f2048&_nc_ohc=FYh3OT-x0AIAX-Z3VNM&_nc_ht=scontent.fsgn5-3.fna&oh=00_AfCifetKtGNeQBaVh8Yrx3lnW3U1CxznHdMAZMB1a1w5XA&oe=6623B508",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 8",
                            Price = 800f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("9db314d0-6a55-492c-9a13-7ee6f2091cbf"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7337),
                            Description = "Description 9",
                            ImageUrl = "https://scontent.fsgn5-11.fna.fbcdn.net/v/t1.6435-9/107542684_1068121206917771_2494785157216852040_n.jpg?_nc_cat=110&ccb=1-7&_nc_sid=5f2048&_nc_ohc=o9rZ89Am3UEAX-VFzIF&_nc_ht=scontent.fsgn5-11.fna&oh=00_AfCNUsxrhFPBP5F0Yu-A-dnY-gT2TF8zwifP0MFBwfUTgQ&oe=66239792",
                            IsDeleted = false,
                            IsPreOrder = true,
                            IsSold = false,
                            Name = "ArtWork 9",
                            Price = 900f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("d9d6b461-8efd-4395-8662-a58caa152200"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7343),
                            Description = "Description 10",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Vincent_Willem_van_Gogh_127.jpg/270px-Vincent_Willem_van_Gogh_127.jpg",
                            IsDeleted = false,
                            IsPreOrder = true,
                            IsSold = false,
                            Name = "ArtWork 10",
                            Price = 1000f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtistAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("ArtistAccount");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1e6c5d1-d770-4f42-bb66-b1939a7c10d4"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7250),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("b7363edb-09c9-4273-ad4d-d245c4f93427"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7257),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("4b9619a5-13c6-43ad-af97-45c19e1ad2e6"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7260),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AudienceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("AudienceAccount");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d01d7b3-91d9-4d2b-a922-567f16780eba"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7277),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("91b86083-8fff-4f1c-ab63-0a6f7d3ab564"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7281),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            CategoryName = "Category1",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(6995),
                            Description = "Description Category1",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            CategoryName = "Category2",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7029),
                            Description = "Description Category2",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Interact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ArtWorkID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtWorkID");

                    b.ToTable("Interacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18454367-8050-40ed-bbe1-da7b46393a05"),
                            ArtWorkID = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            Comment = "Comment 1",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7399),
                            Date = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7401),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("982460db-74fa-4960-a12b-681b931c5271"),
                            ArtWorkID = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            Comment = "Comment 2",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7404),
                            Date = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7405),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("cfb45b60-d9d4-408b-aaef-39f89b8b7ad4"),
                            ArtWorkID = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            Comment = "Comment 3",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7408),
                            Date = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7409),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("84c834d6-b1fa-4e4a-aef0-19f7fd8acc0b"),
                            ArtWorkID = new Guid("7b76bf1f-d24c-4ac9-b466-4179e65605b2"),
                            Comment = "Comment 4",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7413),
                            Date = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7415),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("087a7950-e27f-4de9-be0c-9e2b2c069af7"),
                            ArtWorkID = new Guid("a25e170e-7ddc-4bdc-9215-51c6fb9bcd96"),
                            Comment = "Comment 5",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7417),
                            Date = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7418),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("df841c83-a5c1-43aa-a9c6-1a1f1623e0d6"),
                            ArtWorkID = new Guid("b18dcaa1-d99a-4f15-a30c-5fd72c30280e"),
                            Comment = "Comment 6",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7421),
                            Date = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7422),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("41d740e4-2e3a-4a1b-ae74-a0b8bbae3781"),
                            ArtWorkID = new Guid("bd37c967-1817-495b-89eb-665c81b02d5e"),
                            Comment = "Comment 7",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7425),
                            Date = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7426),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("62f4cfe4-be5e-40d5-a0d6-e8cf540b7ebb"),
                            ArtWorkID = new Guid("1f35558f-a942-4837-81a4-720bae0e8bb1"),
                            Comment = "Comment 8",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7430),
                            Date = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7431),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("47cecb57-85c3-4c45-9439-ce6100840261"),
                            ArtWorkID = new Guid("9db314d0-6a55-492c-9a13-7ee6f2091cbf"),
                            Comment = "Comment 9",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7434),
                            Date = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7435),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("bd9c920b-fb57-4de2-980f-f247bf1950be"),
                            ArtWorkID = new Guid("d9d6b461-8efd-4395-8662-a58caa152200"),
                            Comment = "Comment 10",
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7438),
                            Date = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7439),
                            IsDeleted = false,
                            IsLike = true
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ArtWorkID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPreOrder")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtWorkID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("871a809a-b3fa-495b-9cc2-c5d738a861cf"),
                            ArtWorkID = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7460),
                            IsDeleted = false,
                            Price = 0f,
                            Status = 1,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            isPreOrder = false
                        },
                        new
                        {
                            Id = new Guid("871a809a-b3fa-495b-9cc2-c5d738a862cf"),
                            ArtWorkID = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7464),
                            IsDeleted = false,
                            Price = 0f,
                            Status = 1,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            isPreOrder = false
                        },
                        new
                        {
                            Id = new Guid("871a809a-b3fa-495b-9cc2-c5d738a863cf"),
                            ArtWorkID = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7467),
                            IsDeleted = false,
                            Price = 0f,
                            Status = 1,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ch",
                            isPreOrder = false
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Point")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27df8090-f679-4140-a881-82fd8b89e3c2"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7490),
                            Description = "Description 1",
                            IsDeleted = false,
                            OrderID = new Guid("871a809a-b3fa-495b-9cc2-c5d738a861cf"),
                            Point = 5f
                        },
                        new
                        {
                            Id = new Guid("c73f33fe-29ee-481c-9359-a76c9fdbc39e"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7493),
                            Description = "Description 2",
                            IsDeleted = false,
                            OrderID = new Guid("871a809a-b3fa-495b-9cc2-c5d738a862cf"),
                            Point = 4f
                        },
                        new
                        {
                            Id = new Guid("2d3a374b-1b77-4355-a0b4-b811e20c0407"),
                            Created = new DateTime(2024, 3, 21, 20, 45, 13, 969, DateTimeKind.Local).AddTicks(7497),
                            Description = "Description 3",
                            IsDeleted = false,
                            OrderID = new Guid("871a809a-b3fa-495b-9cc2-c5d738a863cf"),
                            Point = 3f
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountIDReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("applicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("applicationUserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ArtWorkID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtWorkID");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2af3e6d-f685-4ae5-9797-bdbf4576e13b",
                            Email = "hieu123@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98c403cf-7d42-463b-b92b-58627ed9ed69",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu1"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "900ac3ee-3dd9-49c8-a28b-3645bc52df96",
                            Email = "hieuaccount2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb7f2ef4-34d5-43a1-8955-6d1d148f187c",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu2"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866ch",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "528c05dd-9b1f-4b21-a4e6-b21564fae205",
                            Email = "hieuaccount3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3b0073e-31c2-45b5-8110-27688e128975",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu3"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee18fdfe-8362-4b2b-817b-df19e37b60cb",
                            Email = "hieuaccount4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f1e4c9e-db58-4ace-a8d4-95634f39ece0",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu4"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16fe96aa-e624-43d0-92c0-d212533a75ba",
                            Email = "hieuaccount5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d470581c-cd3e-4ebf-b52d-caf9f2aa3265",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu5"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AdminAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("AdminAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("ArtWorks")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.Category", "Category")
                        .WithMany("ArtWorks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtistAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("ArtistAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AudienceAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("AudienceAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Interact", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("Interacts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", null)
                        .WithMany("Interacts")
                        .HasForeignKey("ArtWorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", null)
                        .WithMany("Orders")
                        .HasForeignKey("ArtWorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Rating", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Entities.Order", null)
                        .WithMany("Rating")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Report", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "applicationUser")
                        .WithMany("Reports")
                        .HasForeignKey("applicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.WishList", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("WishLists")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", null)
                        .WithMany("WishLists")
                        .HasForeignKey("ArtWorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.Navigation("Interacts");

                    b.Navigation("Orders");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Category", b =>
                {
                    b.Navigation("ArtWorks");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.Navigation("Rating");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Identity.ApplicationUser", b =>
                {
                    b.Navigation("AdminAccounts");

                    b.Navigation("ArtWorks");

                    b.Navigation("ArtistAccounts");

                    b.Navigation("AudienceAccounts");

                    b.Navigation("Interacts");

                    b.Navigation("Orders");

                    b.Navigation("Reports");

                    b.Navigation("WishLists");
                });
#pragma warning restore 612, 618
        }
    }
}
