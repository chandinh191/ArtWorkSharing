// <auto-generated />
using System;
using AWS_BusinessObjects.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AWS_BusinessObjects.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240321015428_update-model")]
    partial class updatemodel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AdminAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("AdminAccount");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArtWorkStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("ArtWorks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9255),
                            Description = "Description 1",
                            ImageUrl = "Image 1",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 1",
                            Price = 100f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9258),
                            Description = "Description 2",
                            ImageUrl = "Image 2",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 2",
                            Price = 200f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9264),
                            Description = "Description 3",
                            ImageUrl = "Image 3",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 3",
                            Price = 300f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        },
                        new
                        {
                            Id = new Guid("7b76bf1f-d24c-4ac9-b466-4179e65605b2"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9268),
                            Description = "Description 4",
                            ImageUrl = "Image 4",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 4",
                            Price = 400f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        },
                        new
                        {
                            Id = new Guid("a25e170e-7ddc-4bdc-9215-51c6fb9bcd96"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9271),
                            Description = "Description 5",
                            ImageUrl = "Image 5",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 5",
                            Price = 500f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("b18dcaa1-d99a-4f15-a30c-5fd72c30280e"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9274),
                            Description = "Description 6",
                            ImageUrl = "Image 6",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 6",
                            Price = 600f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("bd37c967-1817-495b-89eb-665c81b02d5e"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9277),
                            Description = "Description 7",
                            ImageUrl = "Image 7",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 7",
                            Price = 700f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("1f35558f-a942-4837-81a4-720bae0e8bb1"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9280),
                            Description = "Description 8",
                            ImageUrl = "Image 8",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 8",
                            Price = 800f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("9db314d0-6a55-492c-9a13-7ee6f2091cbf"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9283),
                            Description = "Description 9",
                            ImageUrl = "Image 9",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 9",
                            Price = 900f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("d9d6b461-8efd-4395-8662-a58caa152200"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9285),
                            Description = "Description 10",
                            ImageUrl = "Image 10",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 10",
                            Price = 1000f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtistAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("ArtistAccount");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43c69ec1-4fd4-4b0a-ba9f-a233cca0e4a6"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9137),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("d51c7e66-7b34-4a9e-8805-10981fb72c0c"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9141),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("4284cb44-4a3f-480e-b0cb-73db639995c1"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9145),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AudienceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("AudienceAccount");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99b77cb8-65c8-42cc-82a5-75f5232f02f4"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9161),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("bf17a659-5730-457e-84e1-107b916c0e35"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9164),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArtWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtWorkId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Interact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ArtWorkID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtWorkID");

                    b.ToTable("Interacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fe3d2a7-b8a9-4cd2-96c2-6c2a9677c4ae"),
                            ArtWorkID = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            Comment = "Comment 1",
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9306),
                            Date = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9308),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("ede9392d-29e3-4dee-aa61-f307e7f2dc5a"),
                            ArtWorkID = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            Comment = "Comment 2",
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9311),
                            Date = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9312),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("2eaef90f-349a-49b5-ad1f-12fb363593ee"),
                            ArtWorkID = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            Comment = "Comment 3",
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9315),
                            Date = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9316),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("c8fc8abb-56f4-41f2-84c3-f8d7108f2ce5"),
                            ArtWorkID = new Guid("7b76bf1f-d24c-4ac9-b466-4179e65605b2"),
                            Comment = "Comment 4",
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9318),
                            Date = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9320),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("ba464986-7237-4de2-bb97-4fbf1d19cfbd"),
                            ArtWorkID = new Guid("a25e170e-7ddc-4bdc-9215-51c6fb9bcd96"),
                            Comment = "Comment 5",
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9324),
                            Date = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9325),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("a25fc1a5-4eab-494f-871b-92b5259d6324"),
                            ArtWorkID = new Guid("b18dcaa1-d99a-4f15-a30c-5fd72c30280e"),
                            Comment = "Comment 6",
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9327),
                            Date = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9328),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("24985afa-d6c7-40c7-ada6-d1ff9b2f0755"),
                            ArtWorkID = new Guid("bd37c967-1817-495b-89eb-665c81b02d5e"),
                            Comment = "Comment 7",
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9331),
                            Date = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9332),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("8da8f508-752b-49fe-a2b9-029d1fa9cee2"),
                            ArtWorkID = new Guid("1f35558f-a942-4837-81a4-720bae0e8bb1"),
                            Comment = "Comment 8",
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9334),
                            Date = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9335),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("57a0593c-639a-4b5b-a1f5-9b13aa307563"),
                            ArtWorkID = new Guid("9db314d0-6a55-492c-9a13-7ee6f2091cbf"),
                            Comment = "Comment 9",
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9339),
                            Date = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9340),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("6d9c4b6a-4057-494d-98ae-c918266cf0a3"),
                            ArtWorkID = new Guid("d9d6b461-8efd-4395-8662-a58caa152200"),
                            Comment = "Comment 10",
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9343),
                            Date = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9344),
                            IsDeleted = false,
                            IsLike = true
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ArtWordID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArtWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPreOrder")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtWorkId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("871a809a-b3fa-495b-9cc2-c5d738a861cf"),
                            ArtWordID = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9364),
                            IsDeleted = false,
                            Price = 0f,
                            Status = 1,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            isPreOrder = false
                        },
                        new
                        {
                            Id = new Guid("871a809a-b3fa-495b-9cc2-c5d738a862cf"),
                            ArtWordID = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9367),
                            IsDeleted = false,
                            Price = 0f,
                            Status = 1,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            isPreOrder = false
                        },
                        new
                        {
                            Id = new Guid("871a809a-b3fa-495b-9cc2-c5d738a863cf"),
                            ArtWordID = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9371),
                            IsDeleted = false,
                            Price = 0f,
                            Status = 1,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ch",
                            isPreOrder = false
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePacked")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PackageStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ebe4b4b-e00b-4e82-b3be-418f58df9726"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9386),
                            Description = "Description 1",
                            IsDeleted = false,
                            NamePacked = "Package 1",
                            PackageStatus = 1
                        },
                        new
                        {
                            Id = new Guid("39b58807-f4b1-46bb-bdd2-597399a51c90"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9390),
                            Description = "Description 2",
                            IsDeleted = false,
                            NamePacked = "Package 2",
                            PackageStatus = 1
                        },
                        new
                        {
                            Id = new Guid("a04d8c84-4698-4d73-a3cb-e1ce395d5bcf"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9393),
                            Description = "Description 3",
                            IsDeleted = false,
                            NamePacked = "Package 3",
                            PackageStatus = 1
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.PackageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PackageID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PackageDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2150bd6-bb9d-4f75-a4bc-fb491d355ebb"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9411),
                            EndDate = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9410),
                            IsDeleted = false,
                            PackageID = new Guid("1ebe4b4b-e00b-4e82-b3be-418f58df9726"),
                            PaymentMethodID = new Guid("c466ed52-40d1-41a7-9a76-141526876859"),
                            StartDate = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9410),
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        },
                        new
                        {
                            Id = new Guid("af21e3c8-5e0a-4538-b654-317f775f17c9"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9416),
                            EndDate = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9415),
                            IsDeleted = false,
                            PackageID = new Guid("39b58807-f4b1-46bb-bdd2-597399a51c90"),
                            PaymentMethodID = new Guid("d3b9eb3f-8da2-40b2-8fd0-d0b09f287008"),
                            StartDate = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9415),
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("ae8fc542-550c-40d6-a445-092bc88fadbb"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9420),
                            EndDate = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9420),
                            IsDeleted = false,
                            PackageID = new Guid("a04d8c84-4698-4d73-a3cb-e1ce395d5bcf"),
                            PaymentMethodID = new Guid("d3b9eb3f-8da2-40b2-8fd0-d0b09f287008"),
                            StartDate = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9419),
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaymentMethodStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c466ed52-40d1-41a7-9a76-141526876859"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9434),
                            IsDeleted = false,
                            Name = "MOMO",
                            PaymentMethodStatus = 1
                        },
                        new
                        {
                            Id = new Guid("d3b9eb3f-8da2-40b2-8fd0-d0b09f287008"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9436),
                            IsDeleted = false,
                            Name = "VN Pay",
                            PaymentMethodStatus = 1
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Point")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e4da16d-7055-4ce3-9ac6-725ca43584ec"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9492),
                            Description = "Description 1",
                            IsDeleted = false,
                            OrderID = new Guid("871a809a-b3fa-495b-9cc2-c5d738a861cf"),
                            Point = 5f
                        },
                        new
                        {
                            Id = new Guid("fafc8a3c-59ca-4c47-a9ee-a12cb48753e9"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9496),
                            Description = "Description 2",
                            IsDeleted = false,
                            OrderID = new Guid("871a809a-b3fa-495b-9cc2-c5d738a862cf"),
                            Point = 4f
                        },
                        new
                        {
                            Id = new Guid("039e175c-70d1-41cb-b553-45fc0d170aae"),
                            Created = new DateTime(2024, 3, 21, 8, 54, 28, 405, DateTimeKind.Local).AddTicks(9499),
                            Description = "Description 3",
                            IsDeleted = false,
                            OrderID = new Guid("871a809a-b3fa-495b-9cc2-c5d738a863cf"),
                            Point = 3f
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountIDReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("applicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("applicationUserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d446c6ea-6718-416e-9d29-d707657c892c",
                            Email = "hieu123@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "037d77a6-8981-45e4-8a01-c57236d8c5a3",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu1"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb97afed-8064-413e-a2e8-530a89a0d66c",
                            Email = "hieuaccount2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56ecacdd-88e4-4bd6-9db9-89e8018e00ba",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu2"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866ch",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0c2a197-a4ce-45e0-aecb-6f83f402553c",
                            Email = "hieuaccount3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3935ecf3-db34-439f-bc2b-3411a61e4774",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu3"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e078c043-9f34-4b3f-9fee-3f020f7da947",
                            Email = "hieuaccount4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a778c6b-bef7-4869-b60e-bbe4d2ab5522",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu4"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcb04be2-2977-451b-9671-3ee4bc171de9",
                            Email = "hieuaccount5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95342a3e-d9f1-4ce1-94ab-c25cbdada7ac",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu5"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AdminAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("AdminAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("ArtWorks")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtistAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("ArtistAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AudienceAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("AudienceAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Category", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", null)
                        .WithMany("Categories")
                        .HasForeignKey("ArtWorkId");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Interact", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("Interacts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", null)
                        .WithMany("Interacts")
                        .HasForeignKey("ArtWorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", null)
                        .WithMany("Orders")
                        .HasForeignKey("ArtWorkId");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.PackageDetail", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("PackageDetails")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.Package", null)
                        .WithMany("PackageDetails")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWS_BusinessObjects.Entities.PaymentMethod", null)
                        .WithMany("PackageDetails")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Rating", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Entities.Order", null)
                        .WithMany("Rating")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Report", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "applicationUser")
                        .WithMany("Reports")
                        .HasForeignKey("applicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Interacts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.Navigation("Rating");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Package", b =>
                {
                    b.Navigation("PackageDetails");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.PaymentMethod", b =>
                {
                    b.Navigation("PackageDetails");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Identity.ApplicationUser", b =>
                {
                    b.Navigation("AdminAccounts");

                    b.Navigation("ArtWorks");

                    b.Navigation("ArtistAccounts");

                    b.Navigation("AudienceAccounts");

                    b.Navigation("Interacts");

                    b.Navigation("Orders");

                    b.Navigation("PackageDetails");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
