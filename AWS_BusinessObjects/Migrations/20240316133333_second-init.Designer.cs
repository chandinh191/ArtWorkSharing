// <auto-generated />
using System;
using AWS_BusinessObjects.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AWS_BusinessObjects.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240316133333_second-init")]
    partial class secondinit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AdminAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("AdminAccount");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArtWorkStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("ArtWorks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4630),
                            Description = "Description 1",
                            ImageUrl = "Image 1",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 1",
                            Price = 100f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4634),
                            Description = "Description 2",
                            ImageUrl = "Image 2",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 2",
                            Price = 200f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4640),
                            Description = "Description 3",
                            ImageUrl = "Image 3",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 3",
                            Price = 300f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        },
                        new
                        {
                            Id = new Guid("7b76bf1f-d24c-4ac9-b466-4179e65605b2"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4643),
                            Description = "Description 4",
                            ImageUrl = "Image 4",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 4",
                            Price = 400f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        },
                        new
                        {
                            Id = new Guid("a25e170e-7ddc-4bdc-9215-51c6fb9bcd96"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4647),
                            Description = "Description 5",
                            ImageUrl = "Image 5",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 5",
                            Price = 500f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("b18dcaa1-d99a-4f15-a30c-5fd72c30280e"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4650),
                            Description = "Description 6",
                            ImageUrl = "Image 6",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 6",
                            Price = 600f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("bd37c967-1817-495b-89eb-665c81b02d5e"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4653),
                            Description = "Description 7",
                            ImageUrl = "Image 7",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 7",
                            Price = 700f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("1f35558f-a942-4837-81a4-720bae0e8bb1"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4657),
                            Description = "Description 8",
                            ImageUrl = "Image 8",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 8",
                            Price = 800f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("9db314d0-6a55-492c-9a13-7ee6f2091cbf"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4660),
                            Description = "Description 9",
                            ImageUrl = "Image 9",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 9",
                            Price = 900f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("d9d6b461-8efd-4395-8662-a58caa152200"),
                            ArtWorkStatus = 1,
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4664),
                            Description = "Description 10",
                            ImageUrl = "Image 10",
                            IsDeleted = false,
                            IsPreOrder = false,
                            IsSold = false,
                            Name = "ArtWork 10",
                            Price = 1000f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtistAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("ArtistAccount");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83df969b-d585-412c-8b36-91ed342d0360"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4514),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("7e8027ba-2e73-4391-a971-d965bcef1216"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4517),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("8da07c09-b31f-4b45-890c-f0e78ad504b3"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4524),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AudienceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("AudienceAccount");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92fe78b8-c98c-4a8e-958a-46a054413505"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4550),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("ac8e7a1e-e480-451b-920e-9c543692db80"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4553),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Interact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ArtWorkID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtWorkID");

                    b.ToTable("Interacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73ac74eb-f45e-4100-bfb9-d634b813c5db"),
                            ArtWorkID = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            Comment = "Comment 1",
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4691),
                            Date = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4694),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("fbf53d92-1216-4441-ac41-cd2a61f61cba"),
                            ArtWorkID = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            Comment = "Comment 2",
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4697),
                            Date = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4699),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("b9bc604c-f2d1-4e9d-9b99-ca76ca63cc67"),
                            ArtWorkID = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            Comment = "Comment 3",
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4702),
                            Date = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4703),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("69df4b23-2997-4e2b-91eb-b167fa92a951"),
                            ArtWorkID = new Guid("7b76bf1f-d24c-4ac9-b466-4179e65605b2"),
                            Comment = "Comment 4",
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4705),
                            Date = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4706),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("a832a34c-b56b-44f1-8238-67d488491ff6"),
                            ArtWorkID = new Guid("a25e170e-7ddc-4bdc-9215-51c6fb9bcd96"),
                            Comment = "Comment 5",
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4711),
                            Date = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4712),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("3604a2f4-d8bb-48dd-9790-75cc65aa27ec"),
                            ArtWorkID = new Guid("b18dcaa1-d99a-4f15-a30c-5fd72c30280e"),
                            Comment = "Comment 6",
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4715),
                            Date = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4716),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("7be956e9-67e9-4ff6-b44e-7caa56a4bbef"),
                            ArtWorkID = new Guid("bd37c967-1817-495b-89eb-665c81b02d5e"),
                            Comment = "Comment 7",
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4718),
                            Date = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4720),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("21f7105d-0323-48b5-9bb6-b7f12f48c5a1"),
                            ArtWorkID = new Guid("1f35558f-a942-4837-81a4-720bae0e8bb1"),
                            Comment = "Comment 8",
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4722),
                            Date = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4723),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("07a26cdd-ced7-43fe-ac22-928a90084dc2"),
                            ArtWorkID = new Guid("9db314d0-6a55-492c-9a13-7ee6f2091cbf"),
                            Comment = "Comment 9",
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4728),
                            Date = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4729),
                            IsDeleted = false,
                            IsLike = true
                        },
                        new
                        {
                            Id = new Guid("9aa97bd7-4d6a-45ee-a306-7b1e76c06edd"),
                            ArtWorkID = new Guid("d9d6b461-8efd-4395-8662-a58caa152200"),
                            Comment = "Comment 10",
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4731),
                            Date = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4733),
                            IsDeleted = false,
                            IsLike = true
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ArtWordID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArtWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPreOrder")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtWorkId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("871a809a-b3fa-495b-9cc2-c5d738a861cf"),
                            ArtWordID = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4756),
                            IsDeleted = false,
                            Price = 0f,
                            Status = 1,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            isPreOrder = false
                        },
                        new
                        {
                            Id = new Guid("871a809a-b3fa-495b-9cc2-c5d738a862cf"),
                            ArtWordID = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4760),
                            IsDeleted = false,
                            Price = 0f,
                            Status = 1,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            isPreOrder = false
                        },
                        new
                        {
                            Id = new Guid("871a809a-b3fa-495b-9cc2-c5d738a863cf"),
                            ArtWordID = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4764),
                            IsDeleted = false,
                            Price = 0f,
                            Status = 1,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ch",
                            isPreOrder = false
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePacked")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackageStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ebe4b4b-e00b-4e82-b3be-418f58df9726"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4786),
                            Description = "Description 1",
                            IsDeleted = false,
                            NamePacked = "Package 1",
                            PackageStatus = 1
                        },
                        new
                        {
                            Id = new Guid("39b58807-f4b1-46bb-bdd2-597399a51c90"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4792),
                            Description = "Description 2",
                            IsDeleted = false,
                            NamePacked = "Package 2",
                            PackageStatus = 1
                        },
                        new
                        {
                            Id = new Guid("a04d8c84-4698-4d73-a3cb-e1ce395d5bcf"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4795),
                            Description = "Description 3",
                            IsDeleted = false,
                            NamePacked = "Package 3",
                            PackageStatus = 1
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.PackageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PackageID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PackageDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("beaa99a1-80ea-4c6a-83f5-9dc495073c5e"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4817),
                            EndDate = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4816),
                            IsDeleted = false,
                            PackageID = new Guid("1ebe4b4b-e00b-4e82-b3be-418f58df9726"),
                            PaymentMethodID = new Guid("c466ed52-40d1-41a7-9a76-141526876859"),
                            StartDate = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4816),
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        },
                        new
                        {
                            Id = new Guid("719f3036-fd0a-4eab-8632-8d6166bc94de"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4822),
                            EndDate = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4821),
                            IsDeleted = false,
                            PackageID = new Guid("39b58807-f4b1-46bb-bdd2-597399a51c90"),
                            PaymentMethodID = new Guid("d3b9eb3f-8da2-40b2-8fd0-d0b09f287008"),
                            StartDate = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4821),
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("938dd76b-3e49-4df8-88b8-b3e6fd9c874f"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4827),
                            EndDate = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4826),
                            IsDeleted = false,
                            PackageID = new Guid("a04d8c84-4698-4d73-a3cb-e1ce395d5bcf"),
                            PaymentMethodID = new Guid("d3b9eb3f-8da2-40b2-8fd0-d0b09f287008"),
                            StartDate = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4826),
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c466ed52-40d1-41a7-9a76-141526876859"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4845),
                            IsDeleted = false,
                            Name = "MOMO",
                            PaymentMethodStatus = 1
                        },
                        new
                        {
                            Id = new Guid("d3b9eb3f-8da2-40b2-8fd0-d0b09f287008"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4848),
                            IsDeleted = false,
                            Name = "VN Pay",
                            PaymentMethodStatus = 1
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Point")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0e3c2cb-682f-4021-962a-d5f07ab23cd2"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4895),
                            Description = "Description 1",
                            IsDeleted = false,
                            OrderID = new Guid("871a809a-b3fa-495b-9cc2-c5d738a861cf"),
                            Point = 5f
                        },
                        new
                        {
                            Id = new Guid("8be24e29-4f7e-4656-9c5f-9c8d15ffb1fe"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4899),
                            Description = "Description 2",
                            IsDeleted = false,
                            OrderID = new Guid("871a809a-b3fa-495b-9cc2-c5d738a862cf"),
                            Point = 4f
                        },
                        new
                        {
                            Id = new Guid("e8950d94-4998-4e6c-8e52-1b0a4f4c588f"),
                            Created = new DateTime(2024, 3, 16, 20, 33, 32, 760, DateTimeKind.Local).AddTicks(4902),
                            Description = "Description 3",
                            IsDeleted = false,
                            OrderID = new Guid("871a809a-b3fa-495b-9cc2-c5d738a863cf"),
                            Point = 3f
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountIDReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("applicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("applicationUserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f845d5ce-1bd3-4088-a5ea-7ef6a5f47235",
                            Email = "hieu123@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c1bba25-3c6b-43c5-9281-828bf768c13f",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu1"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4501c250-7033-44d9-8afa-b56aacdb7d1c",
                            Email = "hieuaccount2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc983797-4e03-409b-b026-966716190b0c",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu2"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866ch",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddd254b9-e40b-4e5f-8526-98f09a68343a",
                            Email = "hieuaccount3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55c62358-7217-42d2-9fc2-a41af8231e9e",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu3"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66d02e1f-436f-4ca6-aa1a-10003bdff324",
                            Email = "hieuaccount4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9eefa6f-b77c-4963-824c-ceebae26f524",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu4"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f0aa63d-60e5-4b4e-baa3-4c0b03e864c1",
                            Email = "hieuaccount5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "899daf27-3853-47ca-aaba-33305e2fa2c4",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu5"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AdminAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("AdminAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("ArtWorks")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtistAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("ArtistAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AudienceAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("AudienceAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Interact", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("Interacts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", null)
                        .WithMany("Interacts")
                        .HasForeignKey("ArtWorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", null)
                        .WithMany("Orders")
                        .HasForeignKey("ArtWorkId");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.PackageDetail", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("PackageDetails")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.Package", null)
                        .WithMany("PackageDetails")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWS_BusinessObjects.Entities.PaymentMethod", null)
                        .WithMany("PackageDetails")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Rating", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Entities.Order", null)
                        .WithMany("Rating")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Report", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "applicationUser")
                        .WithMany("Reports")
                        .HasForeignKey("applicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.Navigation("Interacts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.Navigation("Rating");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Package", b =>
                {
                    b.Navigation("PackageDetails");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.PaymentMethod", b =>
                {
                    b.Navigation("PackageDetails");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Identity.ApplicationUser", b =>
                {
                    b.Navigation("AdminAccounts");

                    b.Navigation("ArtWorks");

                    b.Navigation("ArtistAccounts");

                    b.Navigation("AudienceAccounts");

                    b.Navigation("Interacts");

                    b.Navigation("Orders");

                    b.Navigation("PackageDetails");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
